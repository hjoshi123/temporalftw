// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Transaction is an object representing the database table.
type Transaction struct {
	ID                  int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	Amount              types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Description         string        `boil:"description" json:"description" toml:"description" yaml:"description"`
	TransactionTypeID   int           `boil:"transaction_type_id" json:"transaction_type_id" toml:"transaction_type_id" yaml:"transaction_type_id"`
	CreatedAt           time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt           time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	FromAccountNumber   int64         `boil:"from_account_number" json:"from_account_number" toml:"from_account_number" yaml:"from_account_number"`
	ToAccountNumber     int64         `boil:"to_account_number" json:"to_account_number" toml:"to_account_number" yaml:"to_account_number"`
	TransactionStatusID int           `boil:"transaction_status_id" json:"transaction_status_id" toml:"transaction_status_id" yaml:"transaction_status_id"`
	FromBankID          int           `boil:"from_bank_id" json:"from_bank_id" toml:"from_bank_id" yaml:"from_bank_id"`
	ToBankID            int           `boil:"to_bank_id" json:"to_bank_id" toml:"to_bank_id" yaml:"to_bank_id"`
	TransactionID       null.String   `boil:"transaction_id" json:"transaction_id,omitempty" toml:"transaction_id" yaml:"transaction_id,omitempty"`

	R *transactionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionColumns = struct {
	ID                  string
	Amount              string
	Description         string
	TransactionTypeID   string
	CreatedAt           string
	UpdatedAt           string
	FromAccountNumber   string
	ToAccountNumber     string
	TransactionStatusID string
	FromBankID          string
	ToBankID            string
	TransactionID       string
}{
	ID:                  "id",
	Amount:              "amount",
	Description:         "description",
	TransactionTypeID:   "transaction_type_id",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	FromAccountNumber:   "from_account_number",
	ToAccountNumber:     "to_account_number",
	TransactionStatusID: "transaction_status_id",
	FromBankID:          "from_bank_id",
	ToBankID:            "to_bank_id",
	TransactionID:       "transaction_id",
}

var TransactionTableColumns = struct {
	ID                  string
	Amount              string
	Description         string
	TransactionTypeID   string
	CreatedAt           string
	UpdatedAt           string
	FromAccountNumber   string
	ToAccountNumber     string
	TransactionStatusID string
	FromBankID          string
	ToBankID            string
	TransactionID       string
}{
	ID:                  "transactions.id",
	Amount:              "transactions.amount",
	Description:         "transactions.description",
	TransactionTypeID:   "transactions.transaction_type_id",
	CreatedAt:           "transactions.created_at",
	UpdatedAt:           "transactions.updated_at",
	FromAccountNumber:   "transactions.from_account_number",
	ToAccountNumber:     "transactions.to_account_number",
	TransactionStatusID: "transactions.transaction_status_id",
	FromBankID:          "transactions.from_bank_id",
	ToBankID:            "transactions.to_bank_id",
	TransactionID:       "transactions.transaction_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TransactionWhere = struct {
	ID                  whereHelperint
	Amount              whereHelpertypes_Decimal
	Description         whereHelperstring
	TransactionTypeID   whereHelperint
	CreatedAt           whereHelpertime_Time
	UpdatedAt           whereHelpertime_Time
	FromAccountNumber   whereHelperint64
	ToAccountNumber     whereHelperint64
	TransactionStatusID whereHelperint
	FromBankID          whereHelperint
	ToBankID            whereHelperint
	TransactionID       whereHelpernull_String
}{
	ID:                  whereHelperint{field: "\"transactions\".\"id\""},
	Amount:              whereHelpertypes_Decimal{field: "\"transactions\".\"amount\""},
	Description:         whereHelperstring{field: "\"transactions\".\"description\""},
	TransactionTypeID:   whereHelperint{field: "\"transactions\".\"transaction_type_id\""},
	CreatedAt:           whereHelpertime_Time{field: "\"transactions\".\"created_at\""},
	UpdatedAt:           whereHelpertime_Time{field: "\"transactions\".\"updated_at\""},
	FromAccountNumber:   whereHelperint64{field: "\"transactions\".\"from_account_number\""},
	ToAccountNumber:     whereHelperint64{field: "\"transactions\".\"to_account_number\""},
	TransactionStatusID: whereHelperint{field: "\"transactions\".\"transaction_status_id\""},
	FromBankID:          whereHelperint{field: "\"transactions\".\"from_bank_id\""},
	ToBankID:            whereHelperint{field: "\"transactions\".\"to_bank_id\""},
	TransactionID:       whereHelpernull_String{field: "\"transactions\".\"transaction_id\""},
}

// TransactionRels is where relationship names are stored.
var TransactionRels = struct {
	FromBank                 string
	FromAccountNumberAccount string
	ToAccountNumberAccount   string
	ToBank                   string
	TransactionStatus        string
	TransactionType          string
}{
	FromBank:                 "FromBank",
	FromAccountNumberAccount: "FromAccountNumberAccount",
	ToAccountNumberAccount:   "ToAccountNumberAccount",
	ToBank:                   "ToBank",
	TransactionStatus:        "TransactionStatus",
	TransactionType:          "TransactionType",
}

// transactionR is where relationships are stored.
type transactionR struct {
	FromBank                 *Bank              `boil:"FromBank" json:"FromBank" toml:"FromBank" yaml:"FromBank"`
	FromAccountNumberAccount *Account           `boil:"FromAccountNumberAccount" json:"FromAccountNumberAccount" toml:"FromAccountNumberAccount" yaml:"FromAccountNumberAccount"`
	ToAccountNumberAccount   *Account           `boil:"ToAccountNumberAccount" json:"ToAccountNumberAccount" toml:"ToAccountNumberAccount" yaml:"ToAccountNumberAccount"`
	ToBank                   *Bank              `boil:"ToBank" json:"ToBank" toml:"ToBank" yaml:"ToBank"`
	TransactionStatus        *TransactionStatus `boil:"TransactionStatus" json:"TransactionStatus" toml:"TransactionStatus" yaml:"TransactionStatus"`
	TransactionType          *TransactionType   `boil:"TransactionType" json:"TransactionType" toml:"TransactionType" yaml:"TransactionType"`
}

// NewStruct creates a new relationship struct
func (*transactionR) NewStruct() *transactionR {
	return &transactionR{}
}

func (r *transactionR) GetFromBank() *Bank {
	if r == nil {
		return nil
	}
	return r.FromBank
}

func (r *transactionR) GetFromAccountNumberAccount() *Account {
	if r == nil {
		return nil
	}
	return r.FromAccountNumberAccount
}

func (r *transactionR) GetToAccountNumberAccount() *Account {
	if r == nil {
		return nil
	}
	return r.ToAccountNumberAccount
}

func (r *transactionR) GetToBank() *Bank {
	if r == nil {
		return nil
	}
	return r.ToBank
}

func (r *transactionR) GetTransactionStatus() *TransactionStatus {
	if r == nil {
		return nil
	}
	return r.TransactionStatus
}

func (r *transactionR) GetTransactionType() *TransactionType {
	if r == nil {
		return nil
	}
	return r.TransactionType
}

// transactionL is where Load methods for each relationship are stored.
type transactionL struct{}

var (
	transactionAllColumns            = []string{"id", "amount", "description", "transaction_type_id", "created_at", "updated_at", "from_account_number", "to_account_number", "transaction_status_id", "from_bank_id", "to_bank_id", "transaction_id"}
	transactionColumnsWithoutDefault = []string{"amount", "description", "transaction_type_id", "from_account_number", "to_account_number"}
	transactionColumnsWithDefault    = []string{"id", "created_at", "updated_at", "transaction_status_id", "from_bank_id", "to_bank_id", "transaction_id"}
	transactionPrimaryKeyColumns     = []string{"id"}
	transactionGeneratedColumns      = []string{}
)

type (
	// TransactionSlice is an alias for a slice of pointers to Transaction.
	// This should almost always be used instead of []Transaction.
	TransactionSlice []*Transaction
	// TransactionHook is the signature for custom Transaction hook methods
	TransactionHook func(context.Context, boil.ContextExecutor, *Transaction) error

	transactionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionType                 = reflect.TypeOf(&Transaction{})
	transactionMapping              = queries.MakeStructMapping(transactionType)
	transactionPrimaryKeyMapping, _ = queries.BindMapping(transactionType, transactionMapping, transactionPrimaryKeyColumns)
	transactionInsertCacheMut       sync.RWMutex
	transactionInsertCache          = make(map[string]insertCache)
	transactionUpdateCacheMut       sync.RWMutex
	transactionUpdateCache          = make(map[string]updateCache)
	transactionUpsertCacheMut       sync.RWMutex
	transactionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transactionAfterSelectMu sync.Mutex
var transactionAfterSelectHooks []TransactionHook

var transactionBeforeInsertMu sync.Mutex
var transactionBeforeInsertHooks []TransactionHook
var transactionAfterInsertMu sync.Mutex
var transactionAfterInsertHooks []TransactionHook

var transactionBeforeUpdateMu sync.Mutex
var transactionBeforeUpdateHooks []TransactionHook
var transactionAfterUpdateMu sync.Mutex
var transactionAfterUpdateHooks []TransactionHook

var transactionBeforeDeleteMu sync.Mutex
var transactionBeforeDeleteHooks []TransactionHook
var transactionAfterDeleteMu sync.Mutex
var transactionAfterDeleteHooks []TransactionHook

var transactionBeforeUpsertMu sync.Mutex
var transactionBeforeUpsertHooks []TransactionHook
var transactionAfterUpsertMu sync.Mutex
var transactionAfterUpsertHooks []TransactionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Transaction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Transaction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Transaction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Transaction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Transaction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Transaction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Transaction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Transaction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Transaction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transactionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactionHook registers your hook function for all future operations.
func AddTransactionHook(hookPoint boil.HookPoint, transactionHook TransactionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		transactionAfterSelectMu.Lock()
		transactionAfterSelectHooks = append(transactionAfterSelectHooks, transactionHook)
		transactionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		transactionBeforeInsertMu.Lock()
		transactionBeforeInsertHooks = append(transactionBeforeInsertHooks, transactionHook)
		transactionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		transactionAfterInsertMu.Lock()
		transactionAfterInsertHooks = append(transactionAfterInsertHooks, transactionHook)
		transactionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		transactionBeforeUpdateMu.Lock()
		transactionBeforeUpdateHooks = append(transactionBeforeUpdateHooks, transactionHook)
		transactionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		transactionAfterUpdateMu.Lock()
		transactionAfterUpdateHooks = append(transactionAfterUpdateHooks, transactionHook)
		transactionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		transactionBeforeDeleteMu.Lock()
		transactionBeforeDeleteHooks = append(transactionBeforeDeleteHooks, transactionHook)
		transactionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		transactionAfterDeleteMu.Lock()
		transactionAfterDeleteHooks = append(transactionAfterDeleteHooks, transactionHook)
		transactionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		transactionBeforeUpsertMu.Lock()
		transactionBeforeUpsertHooks = append(transactionBeforeUpsertHooks, transactionHook)
		transactionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		transactionAfterUpsertMu.Lock()
		transactionAfterUpsertHooks = append(transactionAfterUpsertHooks, transactionHook)
		transactionAfterUpsertMu.Unlock()
	}
}

// OneG returns a single transaction record from the query using the global executor.
func (q transactionQuery) OneG(ctx context.Context) (*Transaction, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single transaction record from the query.
func (q transactionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Transaction, error) {
	o := &Transaction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for transactions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Transaction records from the query using the global executor.
func (q transactionQuery) AllG(ctx context.Context) (TransactionSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Transaction records from the query.
func (q transactionQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransactionSlice, error) {
	var o []*Transaction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Transaction slice")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Transaction records in the query using the global executor
func (q transactionQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Transaction records in the query.
func (q transactionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count transactions rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q transactionQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q transactionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if transactions exists")
	}

	return count > 0, nil
}

// FromBank pointed to by the foreign key.
func (o *Transaction) FromBank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FromBankID),
	}

	queryMods = append(queryMods, mods...)

	return Banks(queryMods...)
}

// FromAccountNumberAccount pointed to by the foreign key.
func (o *Transaction) FromAccountNumberAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"account_number\" = ?", o.FromAccountNumber),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// ToAccountNumberAccount pointed to by the foreign key.
func (o *Transaction) ToAccountNumberAccount(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"account_number\" = ?", o.ToAccountNumber),
	}

	queryMods = append(queryMods, mods...)

	return Accounts(queryMods...)
}

// ToBank pointed to by the foreign key.
func (o *Transaction) ToBank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ToBankID),
	}

	queryMods = append(queryMods, mods...)

	return Banks(queryMods...)
}

// TransactionStatus pointed to by the foreign key.
func (o *Transaction) TransactionStatus(mods ...qm.QueryMod) transactionStatusQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransactionStatusID),
	}

	queryMods = append(queryMods, mods...)

	return TransactionStatuses(queryMods...)
}

// TransactionType pointed to by the foreign key.
func (o *Transaction) TransactionType(mods ...qm.QueryMod) transactionTypeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TransactionTypeID),
	}

	queryMods = append(queryMods, mods...)

	return TransactionTypes(queryMods...)
}

// LoadFromBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadFromBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[object.FromBankID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			args[obj.FromBankID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`banks`),
		qm.WhereIn(`banks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for banks")
	}

	if len(bankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromBank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.FromBankTransactions = append(foreign.R.FromBankTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromBankID == foreign.ID {
				local.R.FromBank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.FromBankTransactions = append(foreign.R.FromBankTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadFromAccountNumberAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadFromAccountNumberAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[object.FromAccountNumber] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			args[obj.FromAccountNumber] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.account_number in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromAccountNumberAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.FromAccountNumberTransactions = append(foreign.R.FromAccountNumberTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FromAccountNumber == foreign.AccountNumber {
				local.R.FromAccountNumberAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.FromAccountNumberTransactions = append(foreign.R.FromAccountNumberTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadToAccountNumberAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadToAccountNumberAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[object.ToAccountNumber] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			args[obj.ToAccountNumber] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`accounts`),
		qm.WhereIn(`accounts.account_number in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToAccountNumberAccount = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.ToAccountNumberTransactions = append(foreign.R.ToAccountNumberTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ToAccountNumber == foreign.AccountNumber {
				local.R.ToAccountNumberAccount = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.ToAccountNumberTransactions = append(foreign.R.ToAccountNumberTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadToBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadToBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[object.ToBankID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			args[obj.ToBankID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`banks`),
		qm.WhereIn(`banks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for banks")
	}

	if len(bankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToBank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.ToBankTransactions = append(foreign.R.ToBankTransactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ToBankID == foreign.ID {
				local.R.ToBank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.ToBankTransactions = append(foreign.R.ToBankTransactions, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactionStatus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadTransactionStatus(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[object.TransactionStatusID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			args[obj.TransactionStatusID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transaction_statuses`),
		qm.WhereIn(`transaction_statuses.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TransactionStatus")
	}

	var resultSlice []*TransactionStatus
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TransactionStatus")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transaction_statuses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction_statuses")
	}

	if len(transactionStatusAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionStatus = foreign
		if foreign.R == nil {
			foreign.R = &transactionStatusR{}
		}
		foreign.R.Transactions = append(foreign.R.Transactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionStatusID == foreign.ID {
				local.R.TransactionStatus = foreign
				if foreign.R == nil {
					foreign.R = &transactionStatusR{}
				}
				foreign.R.Transactions = append(foreign.R.Transactions, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactionType allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionL) LoadTransactionType(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTransaction interface{}, mods queries.Applicator) error {
	var slice []*Transaction
	var object *Transaction

	if singular {
		var ok bool
		object, ok = maybeTransaction.(*Transaction)
		if !ok {
			object = new(Transaction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTransaction))
			}
		}
	} else {
		s, ok := maybeTransaction.(*[]*Transaction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTransaction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTransaction))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &transactionR{}
		}
		args[object.TransactionTypeID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionR{}
			}

			args[obj.TransactionTypeID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transaction_types`),
		qm.WhereIn(`transaction_types.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TransactionType")
	}

	var resultSlice []*TransactionType
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TransactionType")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transaction_types")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction_types")
	}

	if len(transactionTypeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TransactionType = foreign
		if foreign.R == nil {
			foreign.R = &transactionTypeR{}
		}
		foreign.R.Transactions = append(foreign.R.Transactions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionTypeID == foreign.ID {
				local.R.TransactionType = foreign
				if foreign.R == nil {
					foreign.R = &transactionTypeR{}
				}
				foreign.R.Transactions = append(foreign.R.Transactions, local)
				break
			}
		}
	}

	return nil
}

// SetFromBankG of the transaction to the related item.
// Sets o.R.FromBank to related.
// Adds o to related.R.FromBankTransactions.
// Uses the global database handle.
func (o *Transaction) SetFromBankG(ctx context.Context, insert bool, related *Bank) error {
	return o.SetFromBank(ctx, boil.GetContextDB(), insert, related)
}

// SetFromBank of the transaction to the related item.
// Sets o.R.FromBank to related.
// Adds o to related.R.FromBankTransactions.
func (o *Transaction) SetFromBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"from_bank_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromBankID = related.ID
	if o.R == nil {
		o.R = &transactionR{
			FromBank: related,
		}
	} else {
		o.R.FromBank = related
	}

	if related.R == nil {
		related.R = &bankR{
			FromBankTransactions: TransactionSlice{o},
		}
	} else {
		related.R.FromBankTransactions = append(related.R.FromBankTransactions, o)
	}

	return nil
}

// SetFromAccountNumberAccountG of the transaction to the related item.
// Sets o.R.FromAccountNumberAccount to related.
// Adds o to related.R.FromAccountNumberTransactions.
// Uses the global database handle.
func (o *Transaction) SetFromAccountNumberAccountG(ctx context.Context, insert bool, related *Account) error {
	return o.SetFromAccountNumberAccount(ctx, boil.GetContextDB(), insert, related)
}

// SetFromAccountNumberAccount of the transaction to the related item.
// Sets o.R.FromAccountNumberAccount to related.
// Adds o to related.R.FromAccountNumberTransactions.
func (o *Transaction) SetFromAccountNumberAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"from_account_number"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountNumber, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FromAccountNumber = related.AccountNumber
	if o.R == nil {
		o.R = &transactionR{
			FromAccountNumberAccount: related,
		}
	} else {
		o.R.FromAccountNumberAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			FromAccountNumberTransactions: TransactionSlice{o},
		}
	} else {
		related.R.FromAccountNumberTransactions = append(related.R.FromAccountNumberTransactions, o)
	}

	return nil
}

// SetToAccountNumberAccountG of the transaction to the related item.
// Sets o.R.ToAccountNumberAccount to related.
// Adds o to related.R.ToAccountNumberTransactions.
// Uses the global database handle.
func (o *Transaction) SetToAccountNumberAccountG(ctx context.Context, insert bool, related *Account) error {
	return o.SetToAccountNumberAccount(ctx, boil.GetContextDB(), insert, related)
}

// SetToAccountNumberAccount of the transaction to the related item.
// Sets o.R.ToAccountNumberAccount to related.
// Adds o to related.R.ToAccountNumberTransactions.
func (o *Transaction) SetToAccountNumberAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"to_account_number"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.AccountNumber, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ToAccountNumber = related.AccountNumber
	if o.R == nil {
		o.R = &transactionR{
			ToAccountNumberAccount: related,
		}
	} else {
		o.R.ToAccountNumberAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			ToAccountNumberTransactions: TransactionSlice{o},
		}
	} else {
		related.R.ToAccountNumberTransactions = append(related.R.ToAccountNumberTransactions, o)
	}

	return nil
}

// SetToBankG of the transaction to the related item.
// Sets o.R.ToBank to related.
// Adds o to related.R.ToBankTransactions.
// Uses the global database handle.
func (o *Transaction) SetToBankG(ctx context.Context, insert bool, related *Bank) error {
	return o.SetToBank(ctx, boil.GetContextDB(), insert, related)
}

// SetToBank of the transaction to the related item.
// Sets o.R.ToBank to related.
// Adds o to related.R.ToBankTransactions.
func (o *Transaction) SetToBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"to_bank_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ToBankID = related.ID
	if o.R == nil {
		o.R = &transactionR{
			ToBank: related,
		}
	} else {
		o.R.ToBank = related
	}

	if related.R == nil {
		related.R = &bankR{
			ToBankTransactions: TransactionSlice{o},
		}
	} else {
		related.R.ToBankTransactions = append(related.R.ToBankTransactions, o)
	}

	return nil
}

// SetTransactionStatusG of the transaction to the related item.
// Sets o.R.TransactionStatus to related.
// Adds o to related.R.Transactions.
// Uses the global database handle.
func (o *Transaction) SetTransactionStatusG(ctx context.Context, insert bool, related *TransactionStatus) error {
	return o.SetTransactionStatus(ctx, boil.GetContextDB(), insert, related)
}

// SetTransactionStatus of the transaction to the related item.
// Sets o.R.TransactionStatus to related.
// Adds o to related.R.Transactions.
func (o *Transaction) SetTransactionStatus(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TransactionStatus) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_status_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionStatusID = related.ID
	if o.R == nil {
		o.R = &transactionR{
			TransactionStatus: related,
		}
	} else {
		o.R.TransactionStatus = related
	}

	if related.R == nil {
		related.R = &transactionStatusR{
			Transactions: TransactionSlice{o},
		}
	} else {
		related.R.Transactions = append(related.R.Transactions, o)
	}

	return nil
}

// SetTransactionTypeG of the transaction to the related item.
// Sets o.R.TransactionType to related.
// Adds o to related.R.Transactions.
// Uses the global database handle.
func (o *Transaction) SetTransactionTypeG(ctx context.Context, insert bool, related *TransactionType) error {
	return o.SetTransactionType(ctx, boil.GetContextDB(), insert, related)
}

// SetTransactionType of the transaction to the related item.
// Sets o.R.TransactionType to related.
// Adds o to related.R.Transactions.
func (o *Transaction) SetTransactionType(ctx context.Context, exec boil.ContextExecutor, insert bool, related *TransactionType) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_type_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionTypeID = related.ID
	if o.R == nil {
		o.R = &transactionR{
			TransactionType: related,
		}
	} else {
		o.R.TransactionType = related
	}

	if related.R == nil {
		related.R = &transactionTypeR{
			Transactions: TransactionSlice{o},
		}
	} else {
		related.R.Transactions = append(related.R.Transactions, o)
	}

	return nil
}

// Transactions retrieves all the records using an executor.
func Transactions(mods ...qm.QueryMod) transactionQuery {
	mods = append(mods, qm.From("\"transactions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"transactions\".*"})
	}

	return transactionQuery{q}
}

// FindTransactionG retrieves a single record by ID.
func FindTransactionG(ctx context.Context, iD int, selectCols ...string) (*Transaction, error) {
	return FindTransaction(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTransaction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransaction(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Transaction, error) {
	transactionObj := &Transaction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transactions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, transactionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from transactions")
	}

	if err = transactionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return transactionObj, err
	}

	return transactionObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Transaction) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Transaction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transactions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionInsertCacheMut.RLock()
	cache, cached := transactionInsertCache[key]
	transactionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionAllColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transactions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transactions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into transactions")
	}

	if !cached {
		transactionInsertCacheMut.Lock()
		transactionInsertCache[key] = cache
		transactionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Transaction record using the global executor.
// See Update for more documentation.
func (o *Transaction) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Transaction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Transaction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transactionUpdateCacheMut.RLock()
	cache, cached := transactionUpdateCache[key]
	transactionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionAllColumns,
			transactionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update transactions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transactions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, append(wl, transactionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update transactions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for transactions")
	}

	if !cached {
		transactionUpdateCacheMut.Lock()
		transactionUpdateCache[key] = cache
		transactionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q transactionQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q transactionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for transactions")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransactionSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transactions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transaction")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Transaction) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Transaction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no transactions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionUpsertCacheMut.RLock()
	cache, cached := transactionUpsertCache[key]
	transactionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			transactionAllColumns,
			transactionColumnsWithDefault,
			transactionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transactionAllColumns,
			transactionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert transactions, could not build update column list")
		}

		ret := strmangle.SetComplement(transactionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(transactionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert transactions, could not build conflict column list")
			}

			conflict = make([]string, len(transactionPrimaryKeyColumns))
			copy(conflict, transactionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transactions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(transactionType, transactionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionType, transactionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert transactions")
	}

	if !cached {
		transactionUpsertCacheMut.Lock()
		transactionUpsertCache[key] = cache
		transactionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Transaction record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Transaction) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Transaction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transaction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Transaction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionPrimaryKeyMapping)
	sql := "DELETE FROM \"transactions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for transactions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q transactionQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q transactionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transactionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transactions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transactions")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TransactionSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transactionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transaction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transactions")
	}

	if len(transactionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Transaction) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Transaction provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transaction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransaction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty TransactionSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transactions\".* FROM \"transactions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransactionSlice")
	}

	*o = slice

	return nil
}

// TransactionExistsG checks if the Transaction row exists.
func TransactionExistsG(ctx context.Context, iD int) (bool, error) {
	return TransactionExists(ctx, boil.GetContextDB(), iD)
}

// TransactionExists checks if the Transaction row exists.
func TransactionExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transactions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if transactions exists")
	}

	return exists, nil
}

// Exists checks if the Transaction row exists.
func (o *Transaction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TransactionExists(ctx, exec, o.ID)
}
